{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PlayersService = /*#__PURE__*/(() => {\n  class PlayersService {\n    constructor(httpClient, baseUrl) {\n      this.httpClient = httpClient;\n      this.apiURL = \"http://localhost:13164/api\";\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.apiURL = baseUrl;\n    }\n    getPlayers() {\n      return this.httpClient.get(this.apiURL + 'api/players').pipe(catchError(this.errorHandler));\n    }\n    getPlayer(id) {\n      return this.httpClient.get(this.apiURL + 'api/players/' + id).pipe(catchError(this.errorHandler));\n    }\n    createPlayer(player) {\n      return this.httpClient.post(this.apiURL + 'api/players/', JSON.stringify(player), this.httpOptions).pipe(catchError(this.errorHandler));\n    }\n    updatePlayer(id, player) {\n      return this.httpClient.put(this.apiURL + 'api/players/' + id, JSON.stringify(player), this.httpOptions).pipe(catchError(this.errorHandler));\n    }\n    deletePlayer(id) {\n      return this.httpClient.delete(this.apiURL + 'api/players/' + id, this.httpOptions).pipe(catchError(this.errorHandler));\n    }\n    errorHandler(error) {\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n      return throwError(errorMessage);\n    }\n  }\n  PlayersService.ɵfac = function PlayersService_Factory(t) {\n    return new (t || PlayersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n  PlayersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlayersService,\n    factory: PlayersService.ɵfac,\n    providedIn: 'root'\n  });\n  return PlayersService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}