{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PlayersService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.apiURL = \"http://localhost:13164/api\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getPlayers() {\n    return this.httpClient.get(this.apiURL + '/players').pipe(catchError(this.errorHandler));\n  }\n  getPlayer(id) {\n    return this.httpClient.get(this.apiURL + '/players/' + id).pipe(catchError(this.errorHandler));\n  }\n  createPlayer(player) {\n    return this.httpClient.post(this.apiURL + '/players/', JSON.stringify(player), this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  updatePlayer(id, player) {\n    return this.httpClient.put(this.apiURL + '/players/' + id, JSON.stringify(player), this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  deletePlayer(id) {\n    return this.httpClient.delete(this.apiURL + '/players/' + id, this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  errorHandler(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\nPlayersService.ɵfac = function PlayersService_Factory(t) {\n  return new (t || PlayersService)(i0.ɵɵinject(i1.HttpClient));\n};\nPlayersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlayersService,\n  factory: PlayersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAO3C,OAAM,MAAOC,cAAc;EASzBC,YAAoBC,UAAsB;IAAtB,eAAU,GAAVA,UAAU;IAPtB,WAAM,GAAG,4BAA4B;IAC7C,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;EAE6C;EAE9CO,UAAU;IACR,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAW,IAAI,CAACC,MAAM,GAAG,UAAU,CAAC,CAC3DC,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAC9B;EACL;EAEAC,SAAS,CAACC,EAAE;IACV,OAAO,IAAI,CAACR,UAAU,CAACG,GAAG,CAAS,IAAI,CAACC,MAAM,GAAG,WAAW,GAAGI,EAAE,CAAC,CAC/DH,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAC9B;EACL;EAEAG,YAAY,CAACC,MAAM;IACjB,OAAO,IAAI,CAACV,UAAU,CAACW,IAAI,CAAS,IAAI,CAACP,MAAM,GAAG,WAAW,EAAEQ,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,EAAE,IAAI,CAACI,WAAW,CAAC,CACrGT,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAC9B;EACL;EAEAS,YAAY,CAACP,EAAE,EAAEE,MAAM;IACrB,OAAO,IAAI,CAACV,UAAU,CAACgB,GAAG,CAAS,IAAI,CAACZ,MAAM,GAAG,WAAW,GAAGI,EAAE,EAAEI,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,EAAE,IAAI,CAACI,WAAW,CAAC,CACzGT,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAC9B;EACL;EAEAW,YAAY,CAACT,EAAE;IACb,OAAO,IAAI,CAACR,UAAU,CAACkB,MAAM,CAAS,IAAI,CAACd,MAAM,GAAG,WAAW,GAAGI,EAAE,EAAE,IAAI,CAACM,WAAW,CAAC,CACpFT,IAAI,CACHR,UAAU,CAAC,IAAI,CAACS,YAAY,CAAC,CAC9B;EACL;EAEAA,YAAY,CAACa,KAAK;IAChB,IAAIC,YAAY,GAAG,EAAE;IAErB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrCD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACLF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzE,OAAO1B,UAAU,CAACwB,YAAY,CAAC;EACjC;;AAvDWtB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAA0B,SAAd1B,cAAc;EAAA2B,YAFb;AAAM","names":["HttpHeaders","throwError","catchError","PlayersService","constructor","httpClient","headers","getPlayers","get","apiURL","pipe","errorHandler","getPlayer","id","createPlayer","player","post","JSON","stringify","httpOptions","updatePlayer","put","deletePlayer","delete","error","errorMessage","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aadha\\source\\repos\\Angular\\DatabaseFirst\\DatabaseFirst\\ClientApp\\src\\app\\players\\players.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Player } from \"./player\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayersService {\n\n  private apiURL = \"http://localhost:13164/api\";\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private httpClient: HttpClient) { }\n\n  getPlayers(): Observable<Player[]> {\n    return this.httpClient.get<Player[]>(this.apiURL + '/players')\n      .pipe(\n        catchError(this.errorHandler)\n      );\n  }\n\n  getPlayer(id): Observable<Player> {\n    return this.httpClient.get<Player>(this.apiURL + '/players/' + id)\n      .pipe(\n        catchError(this.errorHandler)\n      );\n  }\n\n  createPlayer(player): Observable<Player> {\n    return this.httpClient.post<Player>(this.apiURL + '/players/', JSON.stringify(player), this.httpOptions)\n      .pipe(\n        catchError(this.errorHandler)\n      );\n  }\n\n  updatePlayer(id, player): Observable<Player> {\n    return this.httpClient.put<Player>(this.apiURL + '/players/' + id, JSON.stringify(player), this.httpOptions)\n      .pipe(\n        catchError(this.errorHandler)\n      );\n  }\n\n  deletePlayer(id) {\n    return this.httpClient.delete<Player>(this.apiURL + '/players/' + id, this.httpOptions)\n      .pipe(\n        catchError(this.errorHandler)\n      );\n  }\n\n  errorHandler(error) {\n    let errorMessage = '';\n\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}