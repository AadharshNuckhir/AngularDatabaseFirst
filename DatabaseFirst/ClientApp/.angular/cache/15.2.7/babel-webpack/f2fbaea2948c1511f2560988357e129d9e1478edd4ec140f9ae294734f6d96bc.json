{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PlayersService {\n  constructor(httpClient, baseUrl) {\n    this.httpClient = httpClient;\n    this.apiURL = \"http://localhost:13164/api\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    this.apiURL = baseUrl;\n  }\n  getPlayers() {\n    return this.httpClient.get(this.apiURL + 'api/players').pipe(catchError(this.errorHandler));\n  }\n  getPlayer(id) {\n    return this.httpClient.get(this.apiURL + 'api/players/' + id).pipe(catchError(this.errorHandler));\n  }\n  createPlayer(player) {\n    return this.httpClient.post(this.apiURL + 'api/players/', JSON.stringify(player), this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  updatePlayer(id, player) {\n    return this.httpClient.put(this.apiURL + 'api/players/' + id, JSON.stringify(player), this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  deletePlayer(id) {\n    return this.httpClient.delete(this.apiURL + 'api/players/' + id, this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  errorHandler(error) {\n    let errorMessage = '';\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\nPlayersService.ɵfac = function PlayersService_Factory(t) {\n  return new (t || PlayersService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nPlayersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PlayersService,\n  factory: PlayersService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAO3C,OAAM,MAAOC,cAAc;EASzBC,YAAoBC,UAAsB,EAAsBC,OAAe;IAA3D,eAAU,GAAVD,UAAU;IAPtB,WAAM,GAAG,4BAA4B;IAC7C,gBAAW,GAAG;MACZE,OAAO,EAAE,IAAIP,WAAW,CAAC;QACvB,cAAc,EAAE;OACjB;KACF;IAGC,IAAI,CAACQ,MAAM,GAAGF,OAAO;EACvB;EAEAG,UAAU;IACR,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAAW,IAAI,CAACF,MAAM,GAAG,aAAa,CAAC,CAC9DG,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAAC,CAC9B;EACL;EAEAC,SAAS,CAACC,EAAO;IACf,OAAO,IAAI,CAACT,UAAU,CAACK,GAAG,CAAS,IAAI,CAACF,MAAM,GAAG,cAAc,GAAGM,EAAE,CAAC,CAClEH,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAAC,CAC9B;EACL;EAEAG,YAAY,CAACC,MAAW;IACtB,OAAO,IAAI,CAACX,UAAU,CAACY,IAAI,CAAS,IAAI,CAACT,MAAM,GAAG,cAAc,EAAEU,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,EAAE,IAAI,CAACI,WAAW,CAAC,CACxGT,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAAC,CAC9B;EACL;EAEAS,YAAY,CAACP,EAAO,EAAEE,MAAW;IAC/B,OAAO,IAAI,CAACX,UAAU,CAACiB,GAAG,CAAS,IAAI,CAACd,MAAM,GAAG,cAAc,GAAGM,EAAE,EAAEI,IAAI,CAACC,SAAS,CAACH,MAAM,CAAC,EAAE,IAAI,CAACI,WAAW,CAAC,CAC5GT,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAAC,CAC9B;EACL;EAEAW,YAAY,CAACT,EAAO;IAClB,OAAO,IAAI,CAACT,UAAU,CAACmB,MAAM,CAAS,IAAI,CAAChB,MAAM,GAAG,cAAc,GAAGM,EAAE,EAAE,IAAI,CAACM,WAAW,CAAC,CACvFT,IAAI,CACHT,UAAU,CAAC,IAAI,CAACU,YAAY,CAAC,CAC9B;EACL;EAEAA,YAAY,CAACa,KAAS;IACpB,IAAIC,YAAY,GAAG,EAAE;IAErB,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;MACrCD,YAAY,GAAGD,KAAK,CAACA,KAAK,CAACG,OAAO;KACnC,MAAM;MACLF,YAAY,GAAG,eAAeD,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;IAEzE,OAAO3B,UAAU,CAACyB,YAAY,CAAC;EACjC;;AAzDWvB,cAAc;mBAAdA,cAAc,0CAS2B,UAAU;AAAA;AATnDA,cAAc;SAAdA,cAAc;EAAA2B,SAAd3B,cAAc;EAAA4B,YAFb;AAAM","names":["HttpHeaders","throwError","catchError","PlayersService","constructor","httpClient","baseUrl","headers","apiURL","getPlayers","get","pipe","errorHandler","getPlayer","id","createPlayer","player","post","JSON","stringify","httpOptions","updatePlayer","put","deletePlayer","delete","error","errorMessage","ErrorEvent","message","status","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aadha\\source\\repos\\Angular\\DatabaseFirst\\DatabaseFirst\\ClientApp\\src\\app\\players\\players.service.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Player } from \"./player\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlayersService {\n\n  private apiURL = \"http://localhost:13164/api\";\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json'\n    })\n  };\n\n  constructor(private httpClient: HttpClient, @Inject('BASE_URL') baseUrl: string) {\n    this.apiURL = baseUrl;\n  }\n\n  getPlayers(): Observable<Player[]> {\n    return this.httpClient.get<Player[]>(this.apiURL + 'api/players')\n      .pipe(\n        catchError(this.errorHandler)\n      );\n  }\n\n  getPlayer(id: any): Observable<Player> {\n    return this.httpClient.get<Player>(this.apiURL + 'api/players/' + id)\n      .pipe(\n        catchError(this.errorHandler)\n      );\n  }\n\n  createPlayer(player: any): Observable<Player> {\n    return this.httpClient.post<Player>(this.apiURL + 'api/players/', JSON.stringify(player), this.httpOptions)\n      .pipe(\n        catchError(this.errorHandler)\n      );\n  }\n\n  updatePlayer(id: any, player: any): Observable<Player> {\n    return this.httpClient.put<Player>(this.apiURL + 'api/players/' + id, JSON.stringify(player), this.httpOptions)\n      .pipe(\n        catchError(this.errorHandler)\n      );\n  }\n\n  deletePlayer(id: any) {\n    return this.httpClient.delete<Player>(this.apiURL + 'api/players/' + id, this.httpOptions)\n      .pipe(\n        catchError(this.errorHandler)\n      );\n  }\n\n  errorHandler(error:any) {\n    let errorMessage = '';\n\n    if (error.error instanceof ErrorEvent) {\n      errorMessage = error.error.message;\n    } else {\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}